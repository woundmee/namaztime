package main  // Объявляем основной пакет программы

import (
    "context"      // Для передачи контекста в Redis и HTTP запросах (управление временем выполнения и отменой)
    "fmt"          // Для вывода информации в консоль
    "io/ioutil"    // Для чтения тела HTTP-ответа
    "net/http"     // Для выполнения HTTP-запросов
    "time"         // Для работы с временем и таймерами

    "github.com/go-redis/redis/v8"  // Клиент Redis для Go (версия 8)
)

var ctx = context.Background()  // Создаём базовый контекст для операций с Redis

// Функция для получения JSON с сайта и сохранения его в Redis с TTL 23 часа
func fetchAndStore(redisClient *redis.Client) error {
    // Выполняем HTTP GET запрос к нужному URL
    resp, err := http.Get("https://namaznsk.ru/namaztime/today")
    if err != nil {
        return err  // Возвращаем ошибку, если запрос не удался
    }
    defer resp.Body.Close()  // Закрываем тело ответа после выхода из функции

    // Читаем всё тело ответа в срез байт
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        return err  // Возвращаем ошибку, если не удалось прочитать тело
    }

    // Сохраняем данные в Redis под ключом "namaztime:today" с TTL 23 часа
    err = redisClient.Set(ctx, "namaztime:today", body, 23*time.Hour).Err()
    if err != nil {
        return err  // Возвращаем ошибку, если не удалось записать в Redis
    }
    return nil  // Успешное выполнение
}

// Функция для получения данных из Redis по ключу
func getFromRedis(redisClient *redis.Client) ([]byte, error) {
    // Получаем значение по ключу "namaztime:today"
    val, err := redisClient.Get(ctx, "namaztime:today").Result()
    if err != nil {
        return nil, err  // Возвращаем ошибку, если ключ не найден или другая проблема
    }
    return []byte(val), nil  // Возвращаем данные в виде среза байт
}

func main() {
    // Создаём клиента Redis, подключаясь к локальному серверу на стандартном порту
    rdb := redis.NewClient(&redis.Options{
        Addr: "localhost:6379",
    })

    // При старте программы обновляем данные в Redis (получаем с сайта и кладём в Redis)
    err := fetchAndStore(rdb)
    if err != nil {
        panic(err)  // Если ошибка, прерываем программу с сообщением
    }

    // Получаем данные из Redis
    data, err := getFromRedis(rdb)
    if err != nil {
        panic(err)  // Если ошибка, прерываем программу с сообщением
    }
    fmt.Println(string(data))  // Выводим полученные данные в консоль

    // Здесь можно добавить логику для периодического обновления данных (например, с помощью cron или таймера)
}
