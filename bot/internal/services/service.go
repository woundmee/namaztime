package services

import (
	"fmt"
	"log/slog"
	"telegramBot/clients/namaznsk"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type NamazService struct {
	logger   *slog.Logger
	namaznsk *namaznsk.Namaz
	bot      *tgbotapi.BotAPI
}

func New(logger *slog.Logger, bot *tgbotapi.BotAPI) *NamazService {
	return &NamazService{
		logger: logger,
		bot:    bot,
	}
}

// –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ namaznsk –∫–ª–∏–µ–Ω—Ç–∞
func (ns *NamazService) SetNamazClient(namazClient *namaznsk.Namaz) {
	ns.namaznsk = namazClient
}

func (ns *NamazService) CommandHelp() string {
	msg := `–ê—Å—Å–∞–ª—è–º—É –∞–ª—è–π–∫—É–º!
–Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞–º–∞–∑–æ–≤ –ø–æ –≥. –ù–æ—Ä–∏–ª—å—Å–∫.
	
	–ß—Ç–æ —è —É–º–µ—é?
	/help ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É
	/today ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–º–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
	
	–¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫—É–¥–∞ –±–µ—Ä—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —á—Ç–æ –≤—Å—ë –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ. –¢–∞–∫–∂–µ –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ`

	return msg
}

func (ns *NamazService) CommandToday(today namaznsk.Namaz) string {

	// data, err := today.TodaySchedule(url)
	data, err := today.TodaySchedule()
	if err != nil {
		msg := "–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
		ns.logger.Error(msg, "error", err)
		return err.Error()
	}

	header := "üåô –î–µ–Ω—å " + data.Day + "\n" +
		"üïå –ù–æ—Ä–∏–ª—å—Å–∫\n\n"
	// res := fmt.Sprintf("%s\t- –§–∞–¥–∂—Ä\n%s\t- –í–æ—Å—Ö–æ–¥\n%s\t- –ó—É—Ö—Ä", data.Fajr, data.Sunrise, data.Zuhr)
	res := fmt.Sprintf("%s   - –§–∞–¥–∂—Ä\n%s   - –í–æ—Å—Ö–æ–¥\n%s - –ó—É—Ö—Ä\n%s - –ê—Å—Ä\n%s - –ú–∞–≥—Ä–∏–±\n%s - –ò—à–∞",
		data.Fajr, data.Sunrise, data.Zuhr, data.Asr, data.Magrib, data.Isha)

	return header + res
}

// func (ns *NamazService) StartNamazNotifier(botID int64, message *tgbotapi.Message) {
func (ns *NamazService) StartNamazNotifier(message *tgbotapi.Message) {
	chatID := message.Chat.ID
	userName := message.Chat.UserName

	ns.logger.Info("–∑–∞–ø—É—Å–∫–∞—é –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "username", "@"+userName, "chatID", chatID)
	for {
		namazTime, name, isExistData := ns.NamazNotify()
		if isExistData {
			msgText := fmt.Sprintf("üåô %s - %s - –≤—Ä–µ–º—è –Ω–∞–º–∞–∑–∞", name, namazTime)

			msg := tgbotapi.NewMessage(chatID, msgText)
			_, err := ns.bot.Send(msg)
			if err != nil {
				if err.Error() == "Forbidden: bot was blocked by the user" {
					ns.logger.Warn("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–æ–≤", "chatID", chatID)
					return
				}
				ns.logger.Error("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "chatID", chatID, "error", err)
			} else {
				ns.logger.Info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", "chatID", chatID, "message", msgText, "msg", msg)
			}
		}

		// ns.logger.Warn("–ï—â–µ –Ω–µ –≤—Ä–µ–º—è –Ω–∞–º–∞–∑–∞!")
		time.Sleep(time.Second * 50)
	}
}

func (ns *NamazService) NamazNotify() (string, string, bool) {
	const fn = "services.service.NamazNotify"

	now := time.Now().Format("15:04")
	todayData, err := ns.namaznsk.TodaySchedule()
	if err != nil {
		ns.logger.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å", "error", err, "fn", fn)
		return "", "", false
	}

	namazTimes := map[string]string{
		todayData.Fajr:    "–§–∞–¥–∂—Ä",
		todayData.Sunrise: "–í–æ—Å—Ö–æ–¥",
		todayData.Zuhr:    "–ó—É—Ö—Ä",
		todayData.Asr:     "–ê—Å—Ä",
		todayData.Magrib:  "–ú–∞–≥—Ä–∏–±",
		todayData.Isha:    "–ò—à–∞",
	}

	if name, ok := namazTimes[now]; ok {
		return now, name, true
	}

	return "", "", false

}
