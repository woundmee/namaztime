package services

import (
	"fmt"
	"log/slog"
	"strings"
	"telegramBot/clients/namaznsk"
	storage "telegramBot/internal/storage/sqlite"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Service struct {
	logger   *slog.Logger
	namaznsk *namaznsk.Namaz
	bot      *tgbotapi.BotAPI
	storage  *storage.Database
}

func New(logger *slog.Logger, namaznsk *namaznsk.Namaz, bot *tgbotapi.BotAPI, storage *storage.Database) *Service {
	return &Service{
		logger:   logger,
		namaznsk: namaznsk,
		bot:      bot,
		storage:  storage,
	}
}

func (s *Service) SendAll(message string) {

	users, err := s.storage.GetUsers()
	if err != nil {
		s.logger.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "error", err)
		return
	}

	for chatID, username := range users {
		msg := tgbotapi.NewMessage(chatID, message)
		s.bot.Send(msg)
		s.logger.Info("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", "username", username, "chatID", chatID, "message", message)
	}
}

func (s *Service) StartNamazNotifier() {
	s.logger.Info("–∑–∞–ø—É—Å–∫–∞—é –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–æ–≤")

	for {
		_, name, isExistData := s.isNamazTime()

		// –ø—è—Ç–Ω–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		if int(time.Now().Weekday()) == int(time.Friday) {

			now := time.Now().Format("15:04")

			sunnahText, isBefore2HourZuhr := s.friday(now)
			duaText, isBefore1HourMagrib := s.beforeMagrib1Hour(now)

			// —Å—É–Ω–Ω—ã –∏ –∞–¥–∞–±—ã –ø—è—Ç–Ω–∏—Ü—ã
			if isBefore2HourZuhr {
				users, err := s.storage.GetUsers()
				if err != nil {
					s.logger.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "error", err)
					return
				}
				for userChatID := range users {
					msg := tgbotapi.NewMessage(userChatID, sunnahText)
					s.bot.Send(msg)
				}
			}

			// –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –∞—Å—Ä–∞
			if isBefore1HourMagrib {
				users, err := s.storage.GetUsers()
				if err != nil {
					s.logger.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "error", err)
					return
				}

				for chatID := range users {
					msg := tgbotapi.NewMessage(chatID, duaText)
					msg.ParseMode = "HTML"
					_, err = s.bot.Send(msg)
					if err != nil {
						s.logger.Error("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º—Å –≤ telegram", "error", err)
					}
				}
			}
		}

		if isExistData {
			users, err := s.storage.GetUsers()
			if err != nil {
				s.logger.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "error", err)
				return
			}

			msgText := fmt.Sprintf("%s ‚Äî –≤—Ä–µ–º—è –Ω–∞–º–∞–∑–∞", strings.ToLower(name))

			if name == "–í–æ—Å—Ö–æ–¥" {
				msgText = "–≤—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞"
			}

			for userChatID, userName := range users {
				msg := tgbotapi.NewMessage(userChatID, msgText)
				_, err := s.bot.Send(msg)
				if err != nil {
					if strings.Contains(err.Error(), "Forbidden: bot was blocked by the user") {
						s.logger.Info("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞", "username", userName, "chatID", userChatID, "error", err)
						s.storage.DeleteUser(userChatID)
						s.logger.Info("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î", "username", userName, "chatID", userChatID)
						continue
					}
					s.logger.Error("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "chatID", userChatID, "username", userName, "error", err)
				} else {
					s.logger.Info("—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", "namaz", name, "chatID", userChatID, "username", userName)
				}
			}

			// –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞
			time.Sleep(time.Second * 60)
			// time.Sleep(time.Minute * 20)

		}

		time.Sleep(time.Second * 50)
	}
}

func (s *Service) isNamazTime() (string, string, bool) {
	now := time.Now().Format("15:04")
	namazTimes, err := s.namazDataMap()
	if err != nil {
		s.logger.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å", "error", err)
		return "", "", false
	}

	if name, ok := namazTimes[now]; ok {
		return now, name, true
	}

	return "", "", false
}

func (s *Service) friday(now string) (string, bool) {
	isFriday := int(time.Now().Weekday()) == int(time.Friday)

	namazData, err := s.namazDataMap()
	if err != nil {
		s.logger.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–º–∞–∑–æ–≤")
		return "", false
	}

	var timeZuhr string

	for t, n := range namazData {
		if n == "–ó—É—Ö—Ä" {
			timeZuhr = t
			break
		}
	}

	timeZuhrParsed, err := time.Parse("15:04", timeZuhr)
	if err != nil {
		s.logger.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è", "error", err)
		return "", false
	}

	before2HoursZuhr := timeZuhrParsed.Add(-2 * time.Hour)

	text := `üåô –ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–Ω–∞—è –ø—è—Ç–Ω–∏—Ü–∞!
	
	–°—É–Ω–Ω—ã –∏ –∞–¥–∞–±—ã:
	Ÿ°. –ø–æ–ª–Ω–æ–µ –æ–º–æ–≤–µ–Ω–∏–µ (–≥—É—Å–ª—å)
	Ÿ¢. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–ª–∞–≥–æ–≤–æ–Ω–∏–π
	Ÿ£. –±–ª–∞–≥–æ—Å–ª–æ–≤–ª—è—Ç—å –ü—Ä–æ—Ä–æ–∫–∞ Ô∑∫
	Ÿ§. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–≤–∞–∫–∞
	Ÿ•. –æ–±–ª–∞—á–µ–Ω–∏–µ –≤ –∫—Ä–∞—Å–∏–≤—É—é –æ–¥–µ–∂–¥—É
	Ÿ¶. —á—Ç–µ–Ω–∏–µ —Å—É—Ä—ã –∞–ª—å-–ö–∞—Ö—Ñ
	Ÿß. —Ä–∞–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –º–µ—á–µ—Ç—å
	Ÿ®. –º–æ–ª—å–±–∞ (–¥—É'–∞)

	ÿßŸÑŸÑŸëŸéŸáŸèŸÖŸëŸé ÿµŸéŸÑŸëŸê ÿπŸéŸÑŸéŸâ ŸÖŸèÿ≠ŸéŸÖŸëŸéÿØŸç ŸàŸéÿπŸéŸÑŸéŸâ ÿßŸìŸÑŸê ŸÖŸèÿ≠ŸéŸÖŸëŸéÿØŸç	
	¬´–û –ê–ª–ª–∞—Ö, –±–ª–∞–≥–æ—Å–ª–æ–≤–∏ –ú—É—Ö–∞–º–º–∞–¥–∞ –∏ —Å–µ–º–µ–π—Å—Ç–≤–æ –ú—É—Ö–∞–º–º–∞–¥–∞¬ª`

	if isFriday && now == before2HoursZuhr.Format("15:04") {
		s.logger.Info("—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É–Ω–Ω–∞—Ö –ø—è—Ç–Ω–∏—Ü—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "time", before2HoursZuhr.Format("15:04"))
		return text, true
	}

	return "", false
}

func (s *Service) beforeMagrib1Hour(now string) (duaText string, isTime bool) {
	namazTimes, err := s.namazDataMap()
	if err != nil {
		s.logger.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–º–∞–∑–æ–≤", "error", err)
		return duaText, isTime
	}

	var timeMagrib string

	for t, n := range namazTimes {
		if n == "–ú–∞–≥—Ä–∏–±" {
			timeMagrib = t
			break
		}
	}

	timeMagribParsed, err := time.Parse("15:04", timeMagrib)
	if err != nil {
		s.logger.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ –ú–∞–≥—Ä–∏–±", "error", err)
		return duaText, true
	}

	before1HourMagrib := timeMagribParsed.Add(-1 * time.Hour)

	duaText = "üïò –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –ê—Å—Ä–∞!\n\n" +
		"–ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –æ—Ç –ø–æ—Å–ª–∞–Ω–Ω–∏–∫–∞ –ê–ª–ª–∞—Ö–∞, –¥–∞ –±–ª–∞–≥–æ—Å–ª–æ–≤–∏—Ç –µ–≥–æ –ê–ª–ª–∞—Ö –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, —á—Ç–æ –æ–Ω —Å–∫–∞–∑–∞–ª: " +
		"<b>¬´–í –ø—è—Ç–Ω–∏—Ü–µ –¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å —á–∞—Å–æ–≤,</b> (–∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –µ—Å—Ç—å —Ç–∞–∫–æ–π —á–∞—Å), <b>—á—Ç–æ –µ—Å–ª–∏ –º—É—Å—É–ª—å–º–∞–Ω–∏–Ω " +
		"–ø–æ–ø—Ä–æ—Å–∏—Ç –≤ –Ω—ë–º –ê–ª–ª–∞—Ö–∞ –æ —á—ë–º-–ª–∏–±–æ, —Ç–æ –µ–º—É –±—É–¥–µ—Ç –¥–∞—Ä–æ–≤–∞–Ω–æ —ç—Ç–æ. –¢–∞–∫ –∏—â–∏—Ç–µ –∂–µ –µ–≥–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –≤—Ä–µ–º–µ–Ω–∏ –ê—Å—Ä–∞¬ª</b>.\n\n" +
		"<i>—Å–º. –∞–Ω-–ù–∞—Å–∞–∏ 1387, –ê–±—É –î–∞—É–¥ 1048, –§–∞—Ç—Ö –∞–ª—å-–ë–∞—Ä–∏ 2/420 –∏ –¥—Ä.</i>"

	if now == before1HourMagrib.Format("15:04") {
		s.logger.Info("—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —á–∞—Å–µ –∞—Å—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "time", now)
		return duaText, true
	}

	return duaText, false
}

func (s *Service) namazDataMap() (map[string]string, error) {
	todayData, err := s.namaznsk.TodaySchedule()
	if err != nil {
		return nil, err
	}

	namazTimes := map[string]string{
		todayData.Fajr:    "–§–∞–¥–∂—Ä",
		todayData.Sunrise: "–í–æ—Å—Ö–æ–¥",
		todayData.Zuhr:    "–ó—É—Ö—Ä",
		todayData.Asr:     "–ê—Å—Ä",
		todayData.Magrib:  "–ú–∞–≥—Ä–∏–±",
		todayData.Isha:    "–ò—à–∞",
	}

	return namazTimes, nil
}

func (s *Service) CommandStart(chatID int64, username string) string {
	text := "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n\n" +
		"üîî –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞. " +
		"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"

	s.storage.AddUser(chatID, username)
	return text
}

func (s *Service) CommandUnsubscribe(chatID int64) string {
	text := "üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –æ–¥–Ω–∞–∫–æ –º–æ–∂–µ—Ç–µ –¥–∞–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ, " +
		"–≤—ã–∑—ã–≤–∞—è –∫–æ–º–∞–Ω–¥—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /help"

	s.storage.DeleteUser(chatID)
	return text
}

func (s *Service) CommandHelp() string {
	msg := `–ê—Å—Å–∞–ª—è–º—É –∞–ª—è–π–∫—É–º!
–Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞–º–∞–∑–æ–≤ –ø–æ –≥. –ù–æ—Ä–∏–ª—å—Å–∫.
	
	–ß—Ç–æ —è —É–º–µ—é?
	/help ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É
	/today ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–º–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
	
	–¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫—É–¥–∞ –±–µ—Ä—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —á—Ç–æ –≤—Å—ë –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ. –¢–∞–∫–∂–µ –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ`

	return msg
}

func (s *Service) CommandToday(today namaznsk.Namaz) string {

	// data, err := today.TodaySchedule(url)
	data, err := today.TodaySchedule()
	if err != nil {
		msg := "–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
		s.logger.Error(msg, "error", err)
		return err.Error()
	}

	icon := s.monthIcon(time.Now().Month())

	header := icon + " –î–µ–Ω—å " + data.Day + "\n" +
		"üïå –ù–æ—Ä–∏–ª—å—Å–∫\n\n"
	// res := fmt.Sprintf("%s\t- –§–∞–¥–∂—Ä\n%s\t- –í–æ—Å—Ö–æ–¥\n%s\t- –ó—É—Ö—Ä", data.Fajr, data.Sunrise, data.Zuhr)
	res := fmt.Sprintf("%s   - –§–∞–¥–∂—Ä\n%s   - –í–æ—Å—Ö–æ–¥\n%s - –ó—É—Ö—Ä\n%s - –ê—Å—Ä\n%s - –ú–∞–≥—Ä–∏–±\n%s - –ò—à–∞",
		data.Fajr, data.Sunrise, data.Zuhr, data.Asr, data.Magrib, data.Isha)

	return header + res
}

func (s *Service) monthIcon(month time.Month) string {
	switch month {
	case time.May, time.June, time.July, time.August, time.September:
		return "‚òÄ"
	default:
		return "‚ùÑ"
	}
}
