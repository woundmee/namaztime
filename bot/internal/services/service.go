package services

import (
	"fmt"
	"log/slog"
	"strings"
	"telegramBot/clients/namaznsk"
	storage "telegramBot/internal/storage/sqlite"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Service struct {
	logger   *slog.Logger
	namaznsk *namaznsk.Namaz
	bot      *tgbotapi.BotAPI
	storage  *storage.Database
}

func New(logger *slog.Logger, namaznsk *namaznsk.Namaz, bot *tgbotapi.BotAPI, storage *storage.Database) *Service {
	return &Service{
		logger:   logger,
		namaznsk: namaznsk,
		bot:      bot,
		storage:  storage,
	}
}

// // fixme: –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ namaznsk –∫–ª–∏–µ–Ω—Ç–∞. –ù—É–∂–Ω–∞ –ª–∏?!
// func (ns *NamazService) SetNamazClient(namazClient *namaznsk.Namaz) {
// 	ns.namaznsk = namazClient
// }

// func (ns *NamazService) AddUser(chatID int64, username string) {
// 	ns.storage.Insert(chatID, username)
// }

// func (ns *NamazService) DeleteUser(chatID int64) {
// 	ns.storage.Delete(chatID)
// }

func (ns *Service) SendAll(message string) {

	users, err := ns.storage.Get()
	if err != nil {
		ns.logger.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "error", err)
		return
	}

	for chatID, username := range users {
		msg := tgbotapi.NewMessage(chatID, message)
		ns.bot.Send(msg)
		ns.logger.Info("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", "username", username, "chatID", chatID, "message", message)
	}
}

func (ns *Service) StartNamazNotifier() {
	ns.logger.Info("–∑–∞–ø—É—Å–∫–∞—é –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–æ–≤")

	var lastSendNotify string

	for {
		currTime, name, isExistData := ns.IsNamazTime()
		if !isExistData {
			lastSendNotify = ""
			time.Sleep(time.Minute)
			continue
		}

		// –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –ø—Ä–æ–ø—É—Å–∫–∞—é
		if lastSendNotify == currTime {
			time.Sleep(time.Minute)
			continue
		}

		users, err := ns.storage.Get()
		if err != nil {
			ns.logger.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "error", err)
			time.Sleep(time.Minute)
			continue
		}

		msgText := fmt.Sprintf("%s ‚Äî –≤—Ä–µ–º—è –Ω–∞–º–∞–∑–∞", strings.ToLower(name))
		for userChatID, userName := range users {
			msg := tgbotapi.NewMessage(userChatID, msgText)
			_, err := ns.bot.Send(msg)
			if err != nil {
				if strings.Contains(err.Error(), "Forbidden: bot was blocked by the user") {
					ns.logger.Info("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞", "username", userName, "chatID", userChatID, "error", err)
					ns.storage.Delete(userChatID)
					ns.logger.Info("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î", "username", userName, "chatID", userChatID)
					return
				}
				ns.logger.Error("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "chatID", userChatID, "username", userName, "error", err)
			} else {
				ns.logger.Info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", "chatID", userChatID, "username", userName)
			}
		}

		lastSendNotify = currTime
		time.Sleep(time.Minute * 20)
	}
}

func (ns *Service) IsNamazTime() (string, string, bool) {
	const fn = "services.service.IsNamazTime"

	now := time.Now().Format("15:04")
	todayData, err := ns.namaznsk.TodaySchedule()
	if err != nil {
		ns.logger.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å", "error", err, "fn", fn)
		return "", "", false
	}

	namazTimes := map[string]string{
		todayData.Fajr:    "–§–∞–¥–∂—Ä",
		todayData.Sunrise: "–í–æ—Å—Ö–æ–¥",
		todayData.Zuhr:    "–ó—É—Ö—Ä",
		todayData.Asr:     "–ê—Å—Ä",
		todayData.Magrib:  "–ú–∞–≥—Ä–∏–±",
		todayData.Isha:    "–ò—à–∞",
	}

	if name, ok := namazTimes[now]; ok {
		return now, name, true
	}

	return "", "", false

}

func (ns *Service) CommandNotify(chatID int64, username string) string {
	text := "üîî –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞!"
	ns.storage.Insert(chatID, username)
	ns.logger.Info("–≤ –ë–î –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "chatID", chatID, "username", username)
	return text
}

func (ns *Service) CommandHelp() string {
	msg := `–ê—Å—Å–∞–ª—è–º—É –∞–ª—è–π–∫—É–º!
–Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞–º–∞–∑–æ–≤ –ø–æ –≥. –ù–æ—Ä–∏–ª—å—Å–∫.
	
	–ß—Ç–æ —è —É–º–µ—é?
	/help ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É
	/today ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–º–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
	
	–¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫—É–¥–∞ –±–µ—Ä—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —á—Ç–æ –≤—Å—ë –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ. –¢–∞–∫–∂–µ –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ`

	return msg
}

func (ns *Service) CommandToday(today namaznsk.Namaz) string {

	// data, err := today.TodaySchedule(url)
	data, err := today.TodaySchedule()
	if err != nil {
		msg := "–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
		ns.logger.Error(msg, "error", err)
		return err.Error()
	}

	header := "üåô –î–µ–Ω—å " + data.Day + "\n" +
		"üïå –ù–æ—Ä–∏–ª—å—Å–∫\n\n"
	// res := fmt.Sprintf("%s\t- –§–∞–¥–∂—Ä\n%s\t- –í–æ—Å—Ö–æ–¥\n%s\t- –ó—É—Ö—Ä", data.Fajr, data.Sunrise, data.Zuhr)
	res := fmt.Sprintf("%s   - –§–∞–¥–∂—Ä\n%s   - –í–æ—Å—Ö–æ–¥\n%s - –ó—É—Ö—Ä\n%s - –ê—Å—Ä\n%s - –ú–∞–≥—Ä–∏–±\n%s - –ò—à–∞",
		data.Fajr, data.Sunrise, data.Zuhr, data.Asr, data.Magrib, data.Isha)

	return header + res
}
